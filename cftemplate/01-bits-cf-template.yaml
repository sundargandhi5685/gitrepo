Parameters:
  KeyName:
    Description: Name of an existing key pair to enable SSH to the instance
    Type: AWS::EC2::KeyPair::KeyName

  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    ConstraintDescription: must specify prod or test.

  InstanceType:
      Description: TestServer EC2 instance type (has default, AllowedValues)
      Type: String
      Default: t2.micro
      AllowedValues:
        - t1.micro
        - t2.nano
        - t2.micro
        - t2.small
      ConstraintDescription: must be a valid EC2 instance type.

Conditions:
  CreateDevResources: !Equals [ !Ref EnvType, dev ]
  CreateTestResources: !Equals [ !Ref EnvType, test ]
  CreateProdResources: !Equals [ !Ref EnvType, prod ]

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-6869aa05
    us-west-2:
      HVM64: ami-7172b611
    us-west-1:
      HVM64: ami-31490d51
    eu-west-1:
      HVM64: ami-f9dd458a
    eu-central-1:
      HVM64: ami-ea26ce85
    ap-northeast-1:
      HVM64: ami-374db956
    ap-northeast-2:
      HVM64: ami-2b408b45
    ap-southeast-1:
      HVM64: ami-a59b49c6
    ap-southeast-2:
      HVM64: ami-dc361ebf
    ap-south-1:
      HVM64: ami-84e3b2eb
    us-east-2:
      HVM64: ami-f6035893
    sa-east-1:
      HVM64: ami-6dd04501
    cn-north-1:
      HVM64: ami-8e6aa0e3

Resources:
  # DevEnvironment Instance
  DevEnvironment:
    Type: AWS::EC2::Instance
    Condition: CreateDevResources
    Properties:
      AvailabilityZone: ap-south-1a
      ImageId:  !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SSHSecurityGroup
      UserData:
        Fn::Base64: |
           #!/bin/bash
           curl -L https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add -
           sudo sh -c 'echo "deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main" > /etc/apt/sources.list.d/atom.list'
           sudo apt-get update
           sudo apt-get install atom -y
           sudo apt-get install nodejs -y
           sudo apt-get install npm -y
           sudo apt-get install chromium-browser -y       
  # ProdEnvironment Instance
  ProdEnvironment:
    Type: AWS::EC2::Instance
    Condition: CreateProdResources
    Properties:
      AvailabilityZone: ap-south-1a
      ImageId:  !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ProdEnvironmentSecurityGroup
      UserData:
        Fn::Base64: |
           #!/bin/bash
           sudo apt-get update
           sudo apt-get install default-jdk -y
           sudo wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
           sudo sh -c 'echo deb https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
           sudo apt-get update
           sudo apt-get install jenkins -y

  # TestEnvironment Instance
  TestEnvironment:
    Type: AWS::EC2::Instance
    Condition: CreateTestResources
    Properties:
      AvailabilityZone: ap-south-1a
      ImageId: ami-84e3b2eb
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref TestEnvironmentSecurityGroup
      UserData:
        Fn::Base64: |
           #!/bin/bash
           sudo apt-get update
           sudo apt-get install default-jdk -y
           sudo apt-get install chromium-browser -y
           sudo apt-get install chromium-chromedriver
           apt-get install apache2 -y

  # an elastic IP for our instance
  MyEIPDev:
    Type: AWS::EC2::EIP
    Condition: CreateDevResources
    Properties:
      InstanceId: !Ref DevEnvironment

  MyEIPProd:
    Type: AWS::EC2::EIP
    Condition: CreateProdResources
    Properties:
      InstanceId: !Ref ProdEnvironment

  MyEIPTest:
    Type: AWS::EC2::EIP
    Condition: CreateTestResources
    Properties:
      InstanceId: !Ref TestEnvironment

  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  # our second EC2 security group
  ProdEnvironmentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdResources
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  # our second EC2 security group
  TestEnvironmentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateTestResources
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
